package app.persistence;

import app.entities.Newsletter;
import app.exceptions.DatabaseException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class NewsletterMapper {

    public static List<Newsletter> wordSearch (String word, ConnectionPool connectionPool) throws DatabaseException {
        List<Newsletter> newsletterList = new ArrayList<>();
        String sql = "SELECT id, title, teaser_text, pdf_file_name, thumbnail_file_name, published FROM public.newsletter WHERE teaser_text ILIKE ?";

        try (Connection connection = connectionPool.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            ps.setString(1, "%" + word + "%");

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("id");
                String title = rs.getString("title");
                String teaserText = rs.getString("teaser_text");
                String pdfFileName = rs.getString("pdf_file_name");
                String thumbnailFileName = rs.getString("thumbnail_file_name");
                LocalDate published = LocalDate.parse(rs.getString("published"));
                newsletterList.add(new Newsletter(id, title, teaserText, pdfFileName, thumbnailFileName, published));
                System.out.println("TEST: Fundet nyhedsbrev");
            }
            return newsletterList;
        } catch (SQLException e) {
            String msg = "Der er sket en fejl under din søgning. Prøv igen";
            throw new DatabaseException(msg, e.getMessage());
        }
    }


    public static int subscribe(String email, ConnectionPool connectionPool) throws DatabaseException {

        String sql = "INSERT INTO subscriber (email, creation_date) VALUES (?, CURRENT_DATE) ON CONFLICT (email) DO NOTHING";
        try (Connection connection = connectionPool.getConnection();
             PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            ps.setString(1, email);
            int rowsAffected = ps.executeUpdate();
            return rowsAffected;
        }
        catch (SQLException e) {
            String msg = "Der er sket en fejl under din tilmelding til nyhedsbrev. Prøv igen";
            throw new DatabaseException(msg, e.getMessage());
        }
    }

    public static Newsletter addNewsletter(ConnectionPool connectionPool, Newsletter newsletter) throws DatabaseException {
        String sql = "INSERT INTO newsletter (title, teaser_text, pdf_file_name, thumbnail_file_name, published) " +
                "VALUES (?, ?, ?, ?, ?) RETURNING id";

        try (
                Connection connection = connectionPool.getConnection();
                PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            ps.setString(1, newsletter.getTitle());
            ps.setString(2, newsletter.getTeaserText());
            ps.setString(3, newsletter.getPdfFileName());
            ps.setString(4, newsletter.getThumbnailFileName());
            ps.setObject(5, newsletter.getPublished()); // Handles LocalDate properly

            try (var rs = ps.executeQuery()) { // Use executeQuery() since we're returning a result
                if (rs.next()) {
                    int generatedId = rs.getInt("id"); // Retrieve autogenerated ID

                    // Return a new Newsletter object including the generated ID
                    return new Newsletter(generatedId, newsletter.getTitle(), newsletter.getTeaserText(),
                                          newsletter.getPdfFileName(), newsletter.getThumbnailFileName(),
                                          newsletter.getPublished());
                } else {
                    throw new DatabaseException("Fejl ved tilføjelse af nyhedsbrev: ingen ID returneret.");
                }
            }
        } catch (SQLException e) {
            String msg = "Fejl ved tilføjelse af nyhedsbrev. Prøv igen.";
            throw new DatabaseException(msg, e.getMessage());
        }
    }

        public static List<Newsletter> getAllNewsletters(ConnectionPool connectionPool) throws DatabaseException {
            String sql = "SELECT id, title, teaser_text, pdf_file_name, thumbnail_file_name, published FROM newsletter ORDER BY published DESC";
            List<Newsletter> newsletters = new ArrayList<>();

            try (
                    Connection connection = connectionPool.getConnection();
                    PreparedStatement ps = connection.prepareStatement(sql);
                    ResultSet rs = ps.executeQuery()
            ) {
                while (rs.next()) {
                    Newsletter newsletter = new Newsletter(
                            rs.getInt("id"),
                            rs.getString("title"),
                            rs.getString("teaser_text"),
                            rs.getString("pdf_file_name"),
                            rs.getString("thumbnail_file_name"),
                            rs.getObject("published", LocalDate.class) // Handles LocalDate correctly
                    );
                    newsletters.add(newsletter);
                }
                return newsletters;
            } catch (SQLException e) {
                String msg = "Fejl ved hentning af nyhedsbreve.";
                throw new DatabaseException(msg, e.getMessage());
            }
        }



}
